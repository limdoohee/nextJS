{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/limdoohee/Desktop/vscode-git/nextJS/pages/[meetUpID]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nfunction MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: \"A First Meetup\",\n    address: \"Some Adderess\",\n    description: \"This is a first Meetup\",\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Akasaka_Palace_6.jpg/1024px-Akasaka_Palace_6.jpg\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n} // 어떤 페이지가 미리 SSG 되어야 하는지 알려줌\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://test:1234@cluster0.ox9ksqx.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"collection1\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    // false - 모든 지원되는 meetup value를 포함하라는 뜻\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetUpID: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetUpID;\n  const client = await MongoClient.connect(\"mongodb+srv://test:1234@cluster0.ox9ksqx.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"collection1\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  }); // fetch data for a single meetup\n\n  return {\n    props: {\n      meetUpData: {\n        id: \"m1\",\n        title: \"A First Meetup\",\n        address: \"Some Adderess\",\n        description: \"This is a first Meetup\",\n        image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Akasaka_Palace_6.jpg/1024px-Akasaka_Palace_6.jpg\"\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/limdoohee/Desktop/vscode-git/nextJS/pages/[meetUpID]/index.js"],"names":["MeetupDetail","MongoClient","MeetupDetails","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetUpID","toString","getStaticProps","context","meetupId","selectedMeetup","findOne","props","meetUpData","id","title","address","description","image"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,aAAT,GAAyB;AACvB,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,gBADR;AAEE,IAAA,OAAO,EAAC,eAFV;AAGE,IAAA,WAAW,EAAC,wBAHd;AAIE,IAAA,KAAK,EAAC;AAJR;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMH,WAAW,CAACI,OAAZ,CACnB,0FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,aAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACL;AACAC,IAAAA,QAAQ,EAAE,KAFL;AAGLC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAHF,GAAP;AAOD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,QAAQ,GAAGD,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMH,WAAW,CAACI,OAAZ,CACnB,0FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,aAAd,CAA1B;AAEA,QAAMgB,cAAc,GAAG,MAAMjB,iBAAiB,CAACkB,OAAlB,CAA0B;AAAEd,IAAAA,GAAG,EAAEY;AAAP,GAA1B,CAA7B,CAT4C,CAW5C;;AACA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAE,IADM;AAEVC,QAAAA,KAAK,EAAE,gBAFG;AAGVC,QAAAA,OAAO,EAAE,eAHC;AAIVC,QAAAA,WAAW,EAAE,wBAJH;AAKVC,QAAAA,KAAK,EACH;AANQ;AADP;AADF,GAAP;AAYD;AAED,eAAe9B,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nfunction MeetupDetails() {\r\n  return (\r\n    <MeetupDetail\r\n      title=\"A First Meetup\"\r\n      address=\"Some Adderess\"\r\n      description=\"This is a first Meetup\"\r\n      image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Akasaka_Palace_6.jpg/1024px-Akasaka_Palace_6.jpg\"\r\n    />\r\n  );\r\n}\r\n\r\n// 어떤 페이지가 미리 SSG 되어야 하는지 알려줌\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://test:1234@cluster0.ox9ksqx.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"collection1\");\r\n\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    // false - 모든 지원되는 meetup value를 포함하라는 뜻\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetUpID: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetUpID;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://test:1234@cluster0.ox9ksqx.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"collection1\");\r\n\r\n  const selectedMeetup = await meetupsCollection.findOne({ _id: meetupId });\r\n\r\n  // fetch data for a single meetup\r\n  return {\r\n    props: {\r\n      meetUpData: {\r\n        id: \"m1\",\r\n        title: \"A First Meetup\",\r\n        address: \"Some Adderess\",\r\n        description: \"This is a first Meetup\",\r\n        image:\r\n          \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Akasaka_Palace_6.jpg/1024px-Akasaka_Palace_6.jpg\",\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}